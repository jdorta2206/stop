/**
 * @fileOverview Firestore Security Rules for Global Stop Game.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model. Users can read public game rooms,
 * but modifying rooms is restricted to the host. Rankings are public, but a user can only
 * modify their own ranking. Notifications are private and only accessible to the recipient.
 *
 * Data Structure:
 * - /rooms/{roomId}: Rooms are the top-level entities for multiplayer games.
 * - /rankings/{userId}: Rankings store global leaderboard information.
 * - /notifications/{notificationId}: Notifications are used to communicate events to users.
 *
 * Key Security Decisions:
 * - User-specific data (rankings, notifications, game history) is secured using the Ownership pattern.
 * - Rooms are secured with a Shared Access pattern, where the host has elevated privileges.
 * - Public listing of rankings is allowed to display the leaderboard.
 *
 * Denormalization for Authorization:
 *  To avoid `get()` calls, authorization data is embedded directly in the documents.
 *  For example, the `hostId` is stored in the `room` document.
 *
 * Structural Segregation:
 * Public and private data are stored in separate collections. Rooms and rankings are top-level
 * collections, while user-specific data like game history is stored in subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to game rooms. Host can modify the room. Other users can only read.
     * @path /rooms/{roomId}
     * @allow (create) - Authenticated user can create a room if they are the host. `request.auth.uid == request.resource.data.hostId`
     * @allow (update) - Only the host can update the room. `request.auth.uid == resource.data.hostId`
     * @allow (delete) - Only the host can delete the room. `request.auth.uid == resource.data.hostId`
     * @allow (get, list) - Any authenticated user can read the room and list rooms.
     * @deny (create) - An unauthenticated user cannot create a room.
     * @deny (update) - A user that isn't the host cannot update the room.
     * @deny (delete) - A user that isn't the host cannot delete the room.
     * @principle Enforces host-based access control for room modifications.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.hostId == request.auth.uid;
    }

    /**
     * @description Allows access to chat messages within a room. Any authenticated user can create a message.
     * @path /rooms/{roomId}/chat/{messageId}
     * @allow (create) - Authenticated user can create a chat message in the room. `isSignedIn()`
     * @allow (get, list) - Any authenticated user can read the chat messages. `isSignedIn()`
     * @deny (update, delete) - No one can update or delete chat messages.
     * @principle: Chat messages are append-only.
     */
    match /rooms/{roomId}/chat/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows access to global rankings. Users can only modify their own ranking.
     * @path /rankings/{userId}
     * @allow (create) - A user can create their ranking document if their auth UID matches the document ID. `request.auth.uid == userId`
     * @allow (update) - A user can update their own ranking. `request.auth.uid == userId`
     * @allow (get, list) - Any user can read the rankings and list rankings.
     * @deny (create) - An unauthenticated user cannot create a ranking.
     * @deny (update) - A user cannot update another user's ranking.
     * @deny (delete) - Rankings cannot be deleted.
     * @principle Enforces document ownership for ranking updates.
     */
    match /rankings/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;
    }

     /**
      * @description Allows access to a user's friends list in their ranking.
      * @path /rankings/{userId}/friends/{friendId}
      * @allow (get, list) - Only the owner can list their friend.
      * @allow (create) - Owner can add a friend.
      * @allow (update) - Owner can update friend.
      * @allow (delete) - Owner can delete a friend.
      * @deny (create) - An unauthenticated user cannot create a friend.
      *
      * @principle Enforces document ownership for friends list.
      */
     match /rankings/{userId}/friends/{friendId} {
        allow get, list: if isSignedIn() && userId == request.auth.uid;
        allow create: if isSignedIn() && userId == request.auth.uid;
        allow update: if isSignedIn() && userId == request.auth.uid;
        allow delete: if isSignedIn() && userId == request.auth.uid;
     }


    /**
     * @description Allows access to a player's game history. Users can only read and write their own game history.
     * @path /rankings/{userId}/gameHistory/{gameId}
     * @allow (create) - A user can create a game history entry if the playerId matches their auth UID. `request.auth.uid == request.resource.data.playerId`
     * @allow (get, list) - A user can read their own game history. `request.auth.uid == userId`
     * @deny (update, delete) - No one can update or delete game history entries.
     * @principle Enforces document ownership for game history.
     */
    match /rankings/{userId}/gameHistory/{gameId} {
      allow get, list: if isSignedIn() && userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.playerId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Allows access to notifications. Only the recipient can read and update their own notifications.
     * @path /notifications/{notificationId}
     * @allow (create) - Any authenticated user can create notification
     * @allow (get) - Only the recipient can read the notification. `request.auth.uid == resource.data.recipientId`
     * @allow (update) - Only the recipient can update the notification. `request.auth.uid == resource.data.recipientId`
     * @deny (list) - Listing notifications is not allowed.
     * @deny (delete) - Notifications cannot be deleted.
     * @principle Enforces recipient-based access control for notifications.
     */
    match /notifications/{notificationId} {
       allow create: if isSignedIn();
       allow get, update: if isSignedIn() && resource.data.recipientId == request.auth.uid;
       allow list, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}