/**
 * @fileoverview Firestore Security Rules for the Global Stop game.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and ownership.
 * It allows authenticated users to read and create data, but restricts modification and deletion
 * to the owner of the specific document, where applicable. Data validation is relaxed to allow rapid prototyping.
 *
 * Data Structure:
 * - /rooms/{roomId}: Stores game room data.
 * - /rankings/{userId}: Stores user ranking data.
 * - /rankings/{userId}/friends/{friendId}: Stores a user's friends list.
 * - /rankings/{userId}/gameHistory/{gameId}: Stores a user's game history.
 * - /notifications/{notificationId}: Stores notifications for users.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Only authenticated users can create/read rooms.
 * - Users can only update their own ranking and access their own history and notifications.
 * - No complex schema validation is enforced in this prototype phase, aside from authorization-critical fields.
 *
 * Denormalization for Authorization:
 * - The rules rely on path-based authorization and ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game room documents.
     * @path /rooms/{roomId}
     * @allow (create) Authenticated user can create a new room.
     * @allow (read) Authenticated user can read a room.
     * @allow (update) Authenticated user can update a room.
     * @deny (delete) No one can delete a room.
     * @principle Allows authenticated users to create/read rooms.
     */
    match /rooms/{roomId} {
      allow read, create, update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Controls access to user ranking documents.
     * @path /rankings/{userId}
     * @allow (create) Authenticated user can create their ranking document.
     * @allow (read) Authenticated user can read a ranking document.
     * @allow (update) Authenticated user can update their own ranking document.
     * @deny (delete) No one can delete a ranking document.
     * @principle Enforces user-ownership for ranking documents.
     */
    match /rankings/{userId} {
      allow read, create: if isSignedIn();
      allow update: if isOwner(userId) && resource != null;
      allow delete: if false;

        /**
         * @description Controls access to user friends list.
         * @path /rankings/{userId}/friends/{friendId}
         * @allow (create) Authenticated user can add a friend.
         * @allow (read) Authenticated user can read their friend's list.
         * @deny (update) No one can update the friends list documents directly.
         * @deny (delete) No one can delete a friend from the friends list documents directly.
         * @principle Enforces user-ownership for friends list.
         */
      match /friends/{friendId} {
        allow read, create: if isOwner(userId);
        allow update, delete: if false;
      }

        /**
         * @description Controls access to game history documents for a user.
         * @path /rankings/{userId}/gameHistory/{gameId}
         * @allow (create) Authenticated user can create game history entries for themselves.
         * @allow (read) Authenticated user can read their own game history.
         * @deny (update) No one can update game history documents directly.
         * @deny (delete) No one can delete game history documents directly.
         * @principle Enforces user-ownership for game history documents.
         */
      match /gameHistory/{gameId} {
        allow read, create: if isOwner(userId);
        allow update, delete: if false;
      }
    }

    /**
     * @description Controls access to notification documents.
     * @path /notifications/{notificationId}
     * @allow (create) Authenticated user can create their notification document.
     * @allow (read) Authenticated user can read their own notification document.
     * @allow (update) Authenticated user can update their own notification document.
     * @deny (delete) No one can delete a notification document.
     * @principle Enforces user-ownership for notification documents.
     */
    match /notifications/{notificationId} {
      allow read, create, update: if request.auth.uid == resource.data.recipientId;
      allow delete: if false;
    }

  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}