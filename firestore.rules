/**
 * @fileoverview Firestore Security Rules for the Global Stop game.
 *
 * Core Philosophy:
 * This ruleset prioritizes user authentication and ownership, ensuring that only
 * authenticated users can create and modify data, and that users can only
 * access their own data or data explicitly shared with them. The rules are
 * designed to be strict on authorization while remaining flexible on data
 * shapes to allow for rapid iteration during the prototyping phase.
 *
 * Data Structure:
 * - /rooms/{roomId}: Stores game room data. Accessible to authenticated users.
 * - /rankings/{userId}: Stores global ranking and stats for each user.
 * - /rankings/{userId}/friends/{friendId}: Stores a user's friend list.
 * - /rankings/{userId}/gameHistory/{gameId}: Stores game history for each user.
 * - /notifications/{notificationId}: Stores notifications for users.
 *
 * Key Security Decisions:
 * - Users must be authenticated to read or write most data.
 * - Users can only update their own ranking and related data (friends, history).
 * - Notifications are only accessible to the recipient.
 * - The exact schema of the data is NOT validated in this prototype phase.
 *
 * Denormalization for Authorization:
 *  There is currently no denormalization of data to simplify reads, however, in the next
 *  iteration, the `Room` document should contain an array of `playerIds` to simplify
 *  determining if a user is authorized to read a room's data.
 *
 * Structural Segregation:
 *  There is no structural segregation of data at this time.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for managing game rooms.
     * @path /rooms/{roomId}
     * @allow (read, create, update) Authenticated user can read, create or update the room.
     * @deny (delete) No one can delete a room.
     * @principle Authenticated users only can read and write game rooms.
     */
    match /rooms/{roomId} {
      allow read, create, update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Rules for managing user ranking and stats.
     * @path /rankings/{userId}
     * @allow (read, create) Authenticated user can read or create their ranking.
     * @allow (update) User can update their own ranking.
     * @deny (delete) No one can delete a ranking.
     * @principle Users can only manage their own ranking data.
     */
    match /rankings/{userId} {
      allow read, create: if isSignedIn();
      allow update: if isOwner(userId);
      allow delete: if false;

      /**
       * @description Rules for managing user's friend list.
       * @path /rankings/{userId}/friends/{friendId}
       * @allow (read, create, update) Only the owner can manage their friend list.
       * @deny (delete) No one can delete a friend.
       * @principle Enforces document ownership for writes, allowing a user to manage their own friends.
       */
      match /friends/{friendId} {
        allow read, create, update: if isOwner(userId);
        allow delete: if false;
      }

      /**
       * @description Rules for managing user's game history.
       * @path /rankings/{userId}/gameHistory/{gameId}
       * @allow (read, create, update) Only the owner can manage their game history.
       * @deny (delete) No one can delete game history.
       * @principle Enforces document ownership for writes, allowing a user to manage their own game history.
       */
      match /gameHistory/{gameId} {
        allow read, create, update: if isOwner(userId);
        allow delete: if false;
      }
    }

    /**
     * @description Rules for managing notifications.
     * @path /notifications/{notificationId}
     * @allow (read, update) Only the recipient can read/update the notification.
     * @deny (create, delete) No one can create/delete a notification.
     * @principle Restricts access to notifications to the intended recipient.
     */
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.recipientId;
      allow create, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}