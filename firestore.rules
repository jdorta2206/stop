/**
 * @fileoverview Firestore Security Rules for Global Stop game.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture, ensuring data protection while allowing for flexible access within the game's intended design.
 * Authentication is mandatory for most operations, and ownership or explicit authorization is required for data modification.
 *
 * Data Structure:
 * - /rooms/{roomId}: Stores game room data, accessible to authenticated users. The host has delete permissions.
 * - /rankings/{userId}: Stores user ranking data, with users able to update only their own ranking.
 * - /rankings/{userId}/friends/{friendId}: Subcollection of user's friends.
 * - /rankings/{userId}/gameHistory/{gameId}: Subcollection of user's game history.
 * - /notifications/{notificationId}: Stores user notifications, accessible only by the recipient.
 *
 * Key Security Decisions:
 * - Authentication Required: Unauthenticated access is generally denied.
 * - Ownership Model: Users can only modify their own data, such as ranking and game history.
 * - Host-Based Room Deletion: Only the host of a game room can delete it.
 * - No Public Listing: List operations are restricted to prevent unauthorized data discovery.
 *
 * Denormalization for Authorization:
 * - /rooms/{roomId}: The `hostId` field is used to determine who can delete the room.  This avoids needing to query a separate document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /rooms/{roomId} collection.
     * @path /rooms/{roomId}
     * @allow (create) Authenticated user can create a room.
     * @deny (create) Unauthenticated user cannot create a room.
     * @allow (update) Authenticated user can update a room.
     * @deny (update) Unauthenticated user cannot update a room.
     * @allow (delete) Authenticated host can delete the room.
     * @deny (delete) Authenticated non-host cannot delete the room.
     * @principle Requires authentication for read/write and allows host to delete.
     */
    match /rooms/{roomId} {
      allow get, list: if isSignedIn();
      allow create, update: if isSignedIn();
      allow delete: if isSignedIn() && resource.data.hostId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for the /rankings/{userId} collection.
     * @path /rankings/{userId}
     * @allow (create) Authenticated user can create their ranking.
     * @deny (create) Unauthenticated user cannot create a ranking.
     * @allow (update) Authenticated user can update their own ranking.
     * @deny (update) Authenticated user cannot update someone else's ranking.
     * @principle Enforces document ownership for writes.
     */
    match /rankings/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /rankings/{userId}/friends/{friendId} subcollection.
     * @path /rankings/{userId}/friends/{friendId}
     * @allow (create) Authenticated user can add a friend.
     * @deny (create) Unauthenticated user cannot add a friend.
     * @allow (update) Authenticated user can update a friend.
     * @deny (update) Authenticated user cannot update someone else's friend.
     * @allow (list) Authenticated user can list their friends.
     * @deny (list) Unauthenticated user cannot list friends.
     * @principle Enforces document ownership for writes.
     */
    match /rankings/{userId}/friends/{friendId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /rankings/{userId}/gameHistory/{gameId} subcollection.
     * @path /rankings/{userId}/gameHistory/{gameId}
     * @allow (create) Authenticated user can add game history.
     * @deny (create) Unauthenticated user cannot add a game history.
     * @allow (update) Authenticated user can update their own game history.
     * @deny (update) Authenticated user cannot update someone else's game history.
     * @allow (list) Authenticated user can list their game history.
     * @deny (list) Unauthenticated user cannot list game history.
     * @principle Enforces document ownership for writes.
     */
    match /rankings/{userId}/gameHistory/{gameId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /notifications/{notificationId} collection.
     * @path /notifications/{notificationId}
     * @allow (get) Authenticated recipient can get their notification.
     * @deny (get) Authenticated non-recipient cannot get the notification.
     * @allow (create) Any authenticated user can create a notification.
     * @deny (create) Unauthenticated user cannot create a notification.
     * @allow (update) Authenticated recipient can update their own notification.
     * @deny (update) Authenticated non-recipient cannot update someone else's notification.
     * @principle Enforces recipient-only access for read/write.
     */
    match /notifications/{notificationId} {
      allow get: if isSignedIn() && resource.data.recipientId == request.auth.uid;
      allow list: if false; // Listing notifications is not allowed
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.recipientId == request.auth.uid && resource != null;
      allow delete: if false;
    }
  }
}