/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for rankings and game history.
 *  Rooms are secured based on user authentication. Notifications are only accessible by the recipient.
 *
 * @dataStructure
 *  - /rooms/{roomId}: Stores game room data, including host, status, settings, and players.
 *  - /rankings/{userId}: Stores user ranking and stats. Each user has their own document.
 *  - /rankings/{userId}/friends/{friendId}: Stores the user's friends list.
 *  - /rankings/{userId}/gameHistory/{gameId}: Stores the game history for each user.
 *  - /notifications/{notificationId}: Stores notifications for individual users.
 *
 * @keySecurityDecisions
 *  - Users can only read/write their own ranking data and game history.
 *  - Notifications are only readable and writable by the intended recipient.
 *  - Unauthenticated listing of rankings is disallowed.
 *  - Rooms are only read/writable by authenticated users (no ownership enforced within the room, which must be implemented in app logic).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Stores multiplayer game rooms. Only authenticated users can read/write.
     * @path /rooms/{roomId}
     * @allow (get) Signed-in user can read a room.
     * @allow (create) Signed-in user can create a room.
     * @deny (update) Non-signed-in user cannot update a room.
     * @deny (delete) Non-signed-in user cannot delete a room.
     * @principle Authenticated users can read and write room data, no ownership enforced.
     */
    match /rooms/{roomId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores a player's global ranking and stats. Users can only update their own document.
     * @path /rankings/{userId}
     * @allow (get) Signed-in user can read their own ranking.
     * @allow (create) Signed-in user can create their own ranking if the userId matches their auth ID.
     * @deny (update) Signed-in user cannot update another user's ranking.
     * @deny (delete) Non-signed-in user cannot delete a ranking.
     * @principle Enforces document ownership for writes, allowing users to manage their own ranking data.
     */
    match /rankings/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Subcollection for a user's friends list.
     * @path /rankings/{userId}/friends/{friendId}
     * @allow (get) Signed-in user can read their own friends list.
     * @allow (create) Signed-in user can create entries in their own friends list.
     * @deny (update) Signed-in user cannot update another user's friends list.
     * @deny (delete) Non-signed-in user cannot delete a friend.
     * @principle Enforces document ownership for writes, allowing users to manage their own friends list.
     */
    match /rankings/{userId}/friends/{friendId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Subcollection for a player's game history.
     * @path /rankings/{userId}/gameHistory/{gameId}
     * @allow (get) Signed-in user can read their own game history.
     * @allow (create) Signed-in user can create game history entries under their own ID.
     * @deny (update) Signed-in user cannot update another user's game history.
     * @deny (delete) Non-signed-in user cannot delete a game history entry.
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree.
     */
    match /rankings/{userId}/gameHistory/{gameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores notifications for users. Only the recipient can read/update their notifications.
     * @path /notifications/{notificationId}
     * @allow (get) Signed-in user can read their own notifications.
     * @allow (create) Signed-in user can create notifications for themself.
     * @deny (update) Signed-in user cannot update another user's notification.
     * @deny (delete) Non-signed-in user cannot delete a notification.
     * @principle Restricts access to notifications to the intended recipient.
     */
    match /notifications/{notificationId} {
      allow get: if request.auth.uid == resource.data.recipientId;
      allow list: if request.auth.uid == resource.data.recipientId;
      allow create: if request.auth.uid == request.resource.data.recipientId;
      allow update: if isExistingOwner(resource.data.recipientId);
      allow delete: if isExistingOwner(resource.data.recipientId);
    }
  }
}