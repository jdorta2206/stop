/**
 * @fileoverview Firestore Security Rules for the Global Stop game.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a shared-access model based on explicit membership for game sessions.
 *
 * Data Structure:
 * - Users are stored in `/users/{userId}`.
 * - Game sessions are stored in `/users/{userId}/gameSessions/{gameSessionId}`.
 * - Rounds are stored in `/users/{userId}/gameSessions/{gameSessionId}/rounds/{roundId}`.
 * - Player responses are stored in `/users/{userId}/gameSessions/{gameSessionId}/rounds/{roundId}/playerRoundResponses/{playerRoundResponseId}`.
 * - Game session players are stored in `/users/{userId}/gameSessions/{gameSessionId}/gameSessionPlayers/{gameSessionPlayerId}`.
 * - Categories are stored in `/categories/{categoryId}`.
 * - Round categories are stored in `/rounds/{roundId}/roundCategories/{roundCategoryId}`.
 * - Dictionary entries are stored in `/dictionaryEntries/{dictionaryEntryId}`.
 *
 * Key Security Decisions:
 * - Users can only read and update their own profiles.
 * - Game sessions are accessible to members, with the host having implicit ownership.
 * - Categories and dictionary entries are publicly readable.
 * - Data validation is minimal in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - GameSession documents include `hostUserId` to simplify ownership checks.
 * - Round documents include `gameSessionId` to associate them with their parent game session.
 * - PlayerRoundResponse documents include `userId`, `roundId`, and `categoryId` for direct access and validation.
 * - GameSessionPlayer documents includes the `gameSessionId` and `userId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile.
     * @path /users/{userId}
     * @allow (create) If the user is authenticated and the userId matches the authenticated user's ID.
     * @allow (get, list) If the user is authenticated and the userId matches the authenticated user's ID.
     * @allow (update) If the user is authenticated and the userId matches the authenticated user's ID and the document exists.
     * @deny (delete) Always.  User deletion should be handled via Firebase Authentication.
     * @deny (create) If the userId does not match the authenticated user's ID.
     * @deny (get, list) If the userId does not match the authenticated user's ID.
     * @deny (update) If the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Allows members of a game session to manage game data.
     * @path /users/{userId}/gameSessions/{gameSessionId}
     * @allow (create) If the user is authenticated.
     * @allow (get, list) If the user is authenticated.
     * @allow (update) If the user is authenticated and the document exists.
     * @allow (delete) If the user is authenticated and the document exists.
     * @deny (create) If the user is not authenticated.
     * @deny (get, list) If the user is not authenticated.
     * @deny (update) If the user is not authenticated.
     * @deny (delete) If the user is not authenticated.
     * @principle Enforces shared access based on membership.
     */
    match /users/{userId}/gameSessions/{gameSessionId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;

       /**
        * @description Allows members of a game session to manage round data.
        * @path /users/{userId}/gameSessions/{gameSessionId}/rounds/{roundId}
        */
      match /users/{userId}/gameSessions/{gameSessionId}/rounds/{roundId} {
        allow create: if isSignedIn();
        allow get, list: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;

        /**
         * @description Allows members of a game session to manage round player responses.
         * @path /users/{userId}/gameSessions/{gameSessionId}/rounds/{roundId}/playerRoundResponses/{playerRoundResponseId}
         */
        match /users/{userId}/gameSessions/{gameSessionId}/rounds/{roundId}/playerRoundResponses/{playerRoundResponseId} {
          allow create: if isSignedIn();
          allow get, list: if isSignedIn();
          allow update: if isSignedIn() && resource != null;
          allow delete: if isSignedIn() && resource != null;
        }
      }

      /**
       * @description Allows members of a game session to manage game session players.
       * @path /users/{userId}/gameSessions/{gameSessionId}/gameSessionPlayers/{gameSessionPlayerId}
       */
      match /users/{userId}/gameSessions/{gameSessionId}/gameSessionPlayers/{gameSessionPlayerId} {
        allow create: if isSignedIn();
        allow get, list: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
      }
    }

    /**
     * @description Allows public read access to game categories. Write access is not allowed in this prototyping phase.
     * @path /categories/{categoryId}
     * @allow (get, list) Always.
     * @deny (create, update, delete) Always.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Links a specific category to a round in the game.  Top level to allow fast lookups of categories within a round.
      * @path /rounds/{roundId}/roundCategories/{roundCategoryId}
      */
     match /rounds/{roundId}/roundCategories/{roundCategoryId} {
        allow create: if isSignedIn();
        allow get, list: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
     }

    /**
     * @description Allows public read access to dictionary entries. Write access is not allowed in this prototyping phase.
     * @path /dictionaryEntries/{dictionaryEntryId}
     * @allow (get, list) Always.
     * @deny (create, update, delete) Always.
     * @principle Allows public read access to dictionary entries.
     */
    match /dictionaryEntries/{dictionaryEntryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}